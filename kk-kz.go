package ntw

import (
	"strings"
)

func init() {
	// register the Kazakh language
	Languages["kk-kz"] = Language{
		Name:    "Kazakh",
		Aliases: []string{"kk", "kz", "kk_KZ", "kazakh"},
		Flag:    "üá∞üáø",

		IntegerToWords: IntegerToKkKz,
	}
}

func pluralKk(n int, words []string) string {
	// –í –∫–∞–∑–∞—Ö—Å–∫–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∫–∞–∫ –≤ —Ä—É—Å—Å–∫–æ–º –Ω–µ—Ç, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	return words[0]
}

func IntegerToKkKz(input int) string {
	var kkUnits = []string{
		"",
		"–±—ñ—Ä",
		"–µ–∫—ñ",
		"“Ø—à",
		"—Ç”©—Ä—Ç",
		"–±–µ—Å",
		"–∞–ª—Ç—ã",
		"–∂–µ—Ç—ñ",
		"—Å–µ–≥—ñ–∑",
		"—Ç–æ“ì—ã–∑",
	}
	var kkTeens = []string{
		"–æ–Ω",
		"–æ–Ω –±—ñ—Ä",
		"–æ–Ω –µ–∫—ñ",
		"–æ–Ω “Ø—à",
		"–æ–Ω —Ç”©—Ä—Ç",
		"–æ–Ω –±–µ—Å",
		"–æ–Ω –∞–ª—Ç—ã",
		"–æ–Ω –∂–µ—Ç—ñ",
		"–æ–Ω —Å–µ–≥—ñ–∑",
		"–æ–Ω —Ç–æ“ì—ã–∑",
	}
	var kkTens = []string{
		"",
		"–æ–Ω",
		"–∂–∏—ã—Ä–º–∞",
		"–æ—Ç—ã–∑",
		"“õ—ã—Ä—ã“õ",
		"–µ–ª—É",
		"–∞–ª–ø—ã—Å",
		"–∂–µ—Ç–ø—ñ—Å",
		"—Å–µ–∫—Å–µ–Ω",
		"—Ç–æ“õ—Å–∞–Ω",
	}
	var kkHundreds = []string{
		"",
		"–∂“Ø–∑",
		"–µ–∫—ñ –∂“Ø–∑",
		"“Ø—à –∂“Ø–∑",
		"—Ç”©—Ä—Ç –∂“Ø–∑",
		"–±–µ—Å –∂“Ø–∑",
		"–∞–ª—Ç—ã –∂“Ø–∑",
		"–∂–µ—Ç—ñ –∂“Ø–∑",
		"—Å–µ–≥—ñ–∑ –∂“Ø–∑",
		"—Ç–æ“ì—ã–∑ –∂“Ø–∑",
	}
	var kkMegas = [][]string{
		{"", "", ""},
		{"–º—ã“£", "–º—ã“£", "–º—ã“£"},
		{"–º–∏–ª–ª–∏–æ–Ω", "–º–∏–ª–ª–∏–æ–Ω", "–º–∏–ª–ª–∏–æ–Ω"},
		{"–º–∏–ª–ª–∏–∞—Ä–¥", "–º–∏–ª–ª–∏–∞—Ä–¥", "–º–∏–ª–ª–∏–∞—Ä–¥"},
		{"—Ç—Ä–∏–ª–ª–∏–æ–Ω", "—Ç—Ä–∏–ª–ª–∏–æ–Ω", "—Ç—Ä–∏–ª–ª–∏–æ–Ω"},
		{"–∫–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω", "–∫–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω", "–∫–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω"},
		{"–∫–≤–∏–Ω—Ç–∏–ª–ª–∏–æ–Ω", "–∫–≤–∏–Ω—Ç–∏–ª–ª–∏–æ–Ω", "–∫–≤–∏–Ω—Ç–∏–ª–ª–∏–æ–Ω"},
	}

	var words []string

	if input < 0 {
		words = append(words, "–º–∏–Ω—É—Å")
		input *= -1
	}

	triplets := integerToTriplets(input)

	if len(triplets) == 0 {
		return "–Ω”©–ª"
	}

	for idx := len(triplets) - 1; idx >= 0; idx-- {
		triplet := triplets[idx]

		if triplet == 0 {
			continue
		}

		hundreds := triplet / 100 % 10
		tens := triplet / 10 % 10
		units := triplet % 10

		if hundreds > 0 {
			words = append(words, kkHundreds[hundreds])
		}

		if tens > 0 || units > 0 {
			switch tens {
			case 0:
				words = append(words, kkUnits[units])
			case 1:
				words = append(words, kkTeens[units])
			default:
				words = append(words, kkTens[tens])
				if units > 0 {
					words = append(words, kkUnits[units])
				}
			}
		}

		if idx >= 1 && idx < len(kkMegas) {
			mega := kkMegas[idx]
			words = append(words, pluralKk(tens*10+units, mega))
		}
	}

	return strings.Join(words, " ")
}
